{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import VScrollin from 'vue-scrollin'\nexport default {\n  methods: {\n    hideWelcome() {\n      document.getElementById(\"welcome-container-top\").className = \"slide-out-top\";\n      document.getElementById(\"welcome-container-bottom\").className = \"slide-out-bottom\";\n      document.getElementById(\"carousel\").className = \"hundred carousel-3d-container\";\n      document.getElementById(\"welcomeComponent\").className = \"hide-welcome\";\n      document.getElementById(\"navbar\").className = \"d-block\";\n      document.getElementById(\"navbar\").className = \"layover\";\n      document.getElementsByTagName(\"UL\")[0].className = \"nav justify-content-center\";\n      document.getElementById(\"more-container\").className = \"hidden\";\n    },\n\n    hideMore() {\n      document.getElementById(\"more-container\").className = \"hidden\";\n    },\n\n    viewMore() {\n      document.getElementById(\"more-container\").className = \"more-container\";\n    }\n\n  },\n\n  mounted() {\n    this.hideMore();\n    setTimeout(() => this.viewMore(), 7800); // ——————————————————————————————————————————————————\n    // TextScramble\n    // ——————————————————————————————————————————————————\n\n    class TextScramble {\n      constructor(el) {\n        this.el = el;\n        this.chars = '!<>-_\\\\/[]{}—=+*^?#__';\n        this.update = this.update.bind(this);\n      }\n\n      setText(newText) {\n        const oldText = this.el.innerText;\n        const length = Math.max(oldText.length, newText.length);\n        const promise = new Promise(resolve => this.resolve = resolve);\n        this.queue = [];\n\n        for (let i = 0; i < length; i++) {\n          const from = oldText[i] || '';\n          const to = newText[i] || '';\n          const start = Math.floor(Math.random() * 50);\n          const end = start + Math.floor(Math.random() * 50);\n          this.queue.push({\n            from,\n            to,\n            start,\n            end\n          });\n        }\n\n        cancelAnimationFrame(this.frameRequest);\n        this.frame = 0;\n        this.update();\n        return promise;\n      }\n\n      setText1(newText) {\n        const oldText = this.el.innerText;\n        const length = Math.max(oldText.length, newText.length);\n        const promise = new Promise(resolve => this.resolve = resolve);\n        this.queue = [];\n\n        for (let i = 0; i < length; i++) {\n          const from = oldText[i] || '';\n          const to = newText[i] || '';\n          const start = Math.floor(Math.random() * 50);\n          const end = start + Math.floor(Math.random() * 50);\n          this.queue.push({\n            from,\n            to,\n            start,\n            end\n          });\n        }\n\n        cancelAnimationFrame(this.frameRequest);\n        this.frame = 0;\n        this.update();\n        return promise;\n      }\n\n      setText2(newText) {\n        const oldText = this.el.innerText;\n        const length = Math.max(oldText.length, newText.length);\n        const promise = new Promise(resolve => this.resolve = resolve);\n        this.queue = [];\n\n        for (let i = 0; i < length; i++) {\n          const from = oldText[i] || '';\n          const to = newText[i] || '';\n          const start = Math.floor(Math.random() * 50);\n          const end = start + Math.floor(Math.random() * 50);\n          this.queue.push({\n            from,\n            to,\n            start,\n            end\n          });\n        }\n\n        cancelAnimationFrame(this.frameRequest);\n        this.frame = 0;\n        this.update();\n        return promise;\n      }\n\n      update() {\n        let output = '';\n        let complete = 0;\n\n        for (let i = 0, n = this.queue.length; i < n; i++) {\n          let {\n            from,\n            to,\n            start,\n            end,\n            char\n          } = this.queue[i];\n\n          if (this.frame >= end) {\n            output += to;\n          } else if (this.frame >= start) {\n            if (!char || Math.random() < 1) {\n              char = this.randomChar();\n              this.queue[i].char = char;\n            }\n\n            output += `<span class=\"dud\">${char}</span>`;\n          } else {\n            output += from;\n          }\n        }\n\n        this.el.innerHTML = output;\n\n        if (complete === this.queue.length) {\n          this.resolve();\n        } else {\n          this.frameRequest = requestAnimationFrame(this.update);\n          this.frame++;\n        }\n      }\n\n      randomChar() {\n        return this.chars[Math.floor(Math.random() * this.chars.length)];\n      }\n\n    } // ——————————————————————————————————————————————————\n    // Phrases\n    // ——————————————————————————————————————————————————\n\n\n    let phrase1 = ['Hi,'];\n    const phrase2 = ['I am <span>Daniel Pellegrini</span>'];\n    const phrase3 = ['and I am a <span>Full Stack Web Dev</span>'];\n    const el1 = document.querySelector('.text1');\n    const el2 = document.querySelector('.text2');\n    const el3 = document.querySelector('.text3');\n    const fx1 = new TextScramble(el1);\n    const fx2 = new TextScramble(el2);\n    const fx3 = new TextScramble(el3);\n    let counter = 0;\n\n    const next = () => {\n      fx1.setText(phrase1[counter]).then(() => {\n        next();\n      });\n      counter = (counter + 1) % phrase1.length;\n    };\n\n    const next1 = () => {\n      fx2.setText1(phrase2[counter]).then(() => {\n        next1();\n      });\n      counter = (counter + 1) % phrase2.length;\n    };\n\n    const next2 = () => {\n      fx3.setText2(phrase3[0]).then(() => {\n        next2();\n      });\n      counter = (counter + 1) % phrase3.length;\n    };\n\n    setTimeout(() => next(), 2000);\n    setTimeout(() => next1(), 3800);\n    setTimeout(() => next2(), 5800);\n  }\n\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;AACA;EACAA;IACAC;MACAC;MACAA;MACAA;MACAA;MACAA;MACAA;MACAA;MACAA;IACA,CAVA;;IAWAC;MACAD;IACA,CAbA;;IAcAE;MACAF;IACA;;EAhBA,CADA;;EAoBAG;IACA;IACAC,wCAFA,CAIA;IACA;IACA;;IAEA;MACAC;QACA;QACA;QACA;MACA;;MACAC;QACA;QACA;QACA;QACA;;QACA;UACA;UACA;UACA;UACA;UACA;YAAAC;YAAAC;YAAAC;YAAAC;UAAA;QACA;;QACAC;QACA;QACA;QACA;MACA;;MACAC;QACA;QACA;QACA;QACA;;QACA;UACA;UACA;UACA;UACA;UACA;YAAAL;YAAAC;YAAAC;YAAAC;UAAA;QACA;;QACAC;QACA;QACA;QACA;MACA;;MACAE;QACA;QACA;QACA;QACA;;QACA;UACA;UACA;UACA;UACA;UACA;YAAAN;YAAAC;YAAAC;YAAAC;UAAA;QACA;;QACAC;QACA;QACA;QACA;MACA;;MACAG;QACA;QACA;;QACA;UACA;YAAAP;YAAAC;YAAAC;YAAAC;YAAAK;UAAA;;UACA;YACAC;UACA,CAFA,MAEA;YACA;cACAD;cACA;YACA;;YACAC;UACA,CANA,MAMA;YACAA;UACA;QACA;;QACA;;QACA;UACA;QACA,CAFA,MAEA;UACA;UACA;QACA;MACA;;MACAC;QACA;MACA;;IApFA,CARA,CA+FA;IACA;IACA;;;IAEA,eACA,KADA;IAGA,iBACA,qCADA;IAGA,iBACA,4CADA;IAIA;IACA;IACA;IACA;IACA;IACA;IAEA;;IAEA;MACAC;QACAC;MACA,CAFA;MAGAC;IACA,CALA;;IAOA;MACAC;QACAC;MACA,CAFA;MAGAF;IACA,CALA;;IAOA;MACAG;QACAC;MACA,CAFA;MAGAJ;IACA,CALA;;IAOAhB;IACAA;IACAA;EAEA;;AAnKA","names":["methods","hideWelcome","document","hideMore","viewMore","mounted","setTimeout","constructor","setText","from","to","start","end","cancelAnimationFrame","setText1","setText2","update","char","output","randomChar","fx1","next","counter","fx2","next1","fx3","next2"],"sourceRoot":"src/components","sources":["Welcome.vue"],"sourcesContent":["<template>\n    <div id=\"welcomeComponent\" class=\"\">\n\n\n        <div id=\"welcome-container-top\" >\n            <div id=\"more-container\" @click=\"hideWelcome\" class=\"more-container\">\n              <div id=\"swipe-up-container\">\n                <i class=\"fas fa-angle-up justify-content-center d-flex slide-out-blurred-top\"></i>\n                <i class=\"fas fa-angle-up justify-content-center d-flex slide-out-blurred-top2\"></i>\n                <i class=\"fas fa-angle-up justify-content-center d-flex slide-out-blurred-top-last\"></i>\n              <h6>More</h6>\n            </div>\n          </div>\n          <div class=\"welcome-content-top\">\n            <div class=\"welcome\">                       \n              <span class=\"text1\"></span>  \n            </div>\n\n            <div class=\"welcome\">                       \n                <span class=\"text2\"></span> \n            </div>\n          </div>\n        </div>\n\n        <!-- LOADING -->\n        <div id=\"loader\">\n            <div class=\"outer\">\n                <div class=\"inner\"></div>\n            </div>\n            <h2>LOADING...</h2>\n        </div>\n        <!-- /LOADING -->\n\n        <div id=\"welcome-container-bottom\">\n          <div class=\"welcome-content-bottom\">\n            <div class=\"welcome\">                \n                <span class=\"text3\"></span>                \n            </div> \n          </div>\n\n        </div>\n\n    </div>\n</template>\n\n\n<script>\n// import VScrollin from 'vue-scrollin'\nexport default {\n    methods: {             \n      hideWelcome() {\n        document.getElementById(\"welcome-container-top\").className = \"slide-out-top\";\n        document.getElementById(\"welcome-container-bottom\").className = \"slide-out-bottom\";\n        document.getElementById(\"carousel\").className = \"hundred carousel-3d-container\";              \n        document.getElementById(\"welcomeComponent\").className = \"hide-welcome\";\n        document.getElementById(\"navbar\").className = \"d-block\";\n        document.getElementById(\"navbar\").className = \"layover\";\n        document.getElementsByTagName(\"UL\")[0].className = \"nav justify-content-center\";\n        document.getElementById(\"more-container\").className = \"hidden\";\n      },\n      hideMore() {\n        document.getElementById(\"more-container\").className = \"hidden\";\n      },\n      viewMore() {\n      document.getElementById(\"more-container\").className = \"more-container\";\n      }\n    },\n\n    mounted() {\n      this.hideMore();\n      setTimeout(() => this.viewMore(), 7800);\n\n        // ——————————————————————————————————————————————————\n        // TextScramble\n        // ——————————————————————————————————————————————————\n\n        class TextScramble {\n          constructor(el) {\n            this.el = el\n            this.chars = '!<>-_\\\\/[]{}—=+*^?#__'\n            this.update = this.update.bind(this)\n          }\n          setText(newText) {\n            const oldText = this.el.innerText\n            const length = Math.max(oldText.length, newText.length)\n            const promise = new Promise((resolve) => this.resolve = resolve)\n            this.queue = []\n            for (let i = 0; i < length; i++) {\n              const from = oldText[i] || ''\n              const to = newText[i] || ''\n              const start = Math.floor(Math.random() * 50)\n              const end = start + Math.floor(Math.random() * 50)\n              this.queue.push({ from, to, start, end })\n            }\n            cancelAnimationFrame(this.frameRequest)\n            this.frame = 0\n            this.update()\n            return promise\n          }\n          setText1(newText) {\n            const oldText = this.el.innerText\n            const length = Math.max(oldText.length, newText.length)\n            const promise = new Promise((resolve) => this.resolve = resolve)\n            this.queue = []\n            for (let i = 0; i < length; i++) {\n              const from = oldText[i] || ''\n              const to = newText[i] || ''\n              const start = Math.floor(Math.random() * 50)\n              const end = start + Math.floor(Math.random() * 50)\n              this.queue.push({ from, to, start, end })\n            }\n            cancelAnimationFrame(this.frameRequest)\n            this.frame = 0\n            this.update()\n            return promise\n          }\n          setText2(newText) {\n            const oldText = this.el.innerText\n            const length = Math.max(oldText.length, newText.length)\n            const promise = new Promise((resolve) => this.resolve = resolve)\n            this.queue = []\n            for (let i = 0; i < length; i++) {\n              const from = oldText[i] || ''\n              const to = newText[i] || ''\n              const start = Math.floor(Math.random() * 50)\n              const end = start + Math.floor(Math.random() * 50)\n              this.queue.push({ from, to, start, end })\n            }\n            cancelAnimationFrame(this.frameRequest)\n            this.frame = 0\n            this.update()\n            return promise\n          }\n          update() {\n            let output = ''\n            let complete = 0\n            for (let i = 0, n = this.queue.length; i < n; i++) {\n              let { from, to, start, end, char } = this.queue[i]\n              if (this.frame >= end) {                \n                output += to\n              } else if (this.frame >= start) {\n                if (!char || Math.random() < 1) {\n                  char = this.randomChar()\n                  this.queue[i].char = char\n                }\n                output += `<span class=\"dud\">${char}</span>`\n              } else {\n                output += from\n              }\n            }\n            this.el.innerHTML = output\n            if (complete === this.queue.length) {\n              this.resolve()\n            } else {\n              this.frameRequest = requestAnimationFrame(this.update)\n              this.frame++\n            }\n          }\n          randomChar() {\n            return this.chars[Math.floor(Math.random() * this.chars.length)]\n          }\n        }\n\n        // ——————————————————————————————————————————————————\n        // Phrases\n        // ——————————————————————————————————————————————————\n\n        let phrase1 = [\n          'Hi,'\n        ]\n        const phrase2 = [\n          'I am <span>Daniel Pellegrini</span>'\n        ]\n        const phrase3 = [\n          'and I am a <span>Full Stack Web Dev</span>'\n        ]\n\n        const el1 = document.querySelector('.text1')\n        const el2 = document.querySelector('.text2')\n        const el3 = document.querySelector('.text3')\n        const fx1 = new TextScramble(el1)\n        const fx2 = new TextScramble(el2)\n        const fx3 = new TextScramble(el3)\n\n        let counter = 0;\n\n        const next = () => {\n          fx1.setText(phrase1[counter]).then(() => {\n            next()\n          })\n          counter = (counter + 1) % phrase1.length\n        }\n\n        const next1 = () => {\n          fx2.setText1(phrase2[counter]).then(() => {\n            next1()\n          })\n          counter = (counter + 1) % phrase2.length\n        }\n\n        const next2 = () => {\n          fx3.setText2(phrase3[0]).then(() => {\n            next2()\n          })\n          counter = (counter + 1) % phrase3.length\n        }\n        \n          setTimeout(() => next(), 2000);\n          setTimeout(() => next1(), 3800);\n          setTimeout(() => next2(), 5800);\n\n    }\n}\n</script>\n\n"]},"metadata":{},"sourceType":"module"}